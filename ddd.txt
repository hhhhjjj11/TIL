# DRF실습 serializer를 이용한 CRUD

## 흐름 : db에서 쿼리써서 데이터긁어온다음 시리얼라이저에 넣고 반환값을 응답객체에 넣어서 리턴.

## 기억할것
### 유효하지 않은 데이터에 대해 예외 발생시키기
is_valid() 와 is_valid(raise_exception = True)
- true를 넣을 경우 HTTP 400 응답을 반환
- 다음의 코드와 동일한 기능을 하게 된다!
```python
Response(serializer.errors, status = status.HTTP_400_BAD_REQUEST
```



직렬화란..

데이터 포맷을 맞추는 것. (json으로)

이렇게 하면..

우리는 응답을 html이라는 웹페이지로 주는 것이 아니라 데이터 자체를 활용가능한 포맷으로 맞춰서 주기 때문에 누구든 접근해서 데이터를 활용할 수 있게 됨!
- 어떤언어, 어떤환경, 웹이든 임베디드든, 나중에 다시 쉽게 사용할 수 있는 포맷으로 변환하는 과정임.
- 그때 대표적인 데이터형식이 json인 것임. 


역직렬화
- json데이터를 파이썬의 객체로 만들거나, 모델의 인스턴스로 만들거나 하는것. 
- DRF는 시리얼라이즈를 이용해서 이 또한 바로 해낼 수 있다! 
- 게시글 작성시 사용자의 입력을 (이제는 json으로 주고받는듯?) 




시리얼라이저로 역참조 하기
[게시글 조회시 해당 게시글에 달려있는 댓글까지 함께 보여주기]

- 시리얼라이즈에서 해당 모델에다가 필드를 더 불러온다음에 







댓글 생성시 read_only_fields 이용해서 게시글 유효성검사 통과시키기.
- 배경
- 템플릿을 리턴할때 댓글 생성 로직을 생각해보자. 
    - Comment모델에 article 외래키필드로 있었다.
    - 댓글작성시 게시글상세페이지에서 작성하므로, 사용자가 게시글을 정하지 않는다.
    - 따라서 모델폼의 메타태그에서 exclude를 이용해서 입력폼에서 제외시켰었다. 
    - 그다음에 유효성검사를 한다음, 마지막에 인스턴스에다가 article을 직접 지정해주고나서 저장해주었다.

- 하고싶은 말 : 폼자체에서 article필드를 취급하지 않게 만들었기 때문에 article필드가 들어있지 않아도 "폼의 유효성 검사"는 통과할 수 있음.
- 그러나, 시리얼라이즈를 사용할 경우 exclude와 같이 필드를 배제할 수 없음. -> 따라서 유효성 검사가 통과가 안됨!! 
Q. 왜 필드를 배제하면 안됨? 
 - 유효성 검사 후에, article을 추가해주어야하는데, 이때도 시리얼라이저의 인스턴스에 인자를 넣어서 지정하는데, 시리얼라이저의 인스턴스에 해당 필드가 없어져버리면 안되니까 그런듯하다.  